package configuration

import (
	"encoding/json"
)

// The Configuration sets the relationship between the organization and the smartcontract.
type Configuration struct {
	Organization string
	Project      string
	NetworkId    string
	Group        string
	Name         string
	Address      string
	id           uint
	exists       bool
}

// Unique id of the configuration generated by the database
func (c *Configuration) SetId(id uint) {
	c.exists = true
	c.id = id
}

// The smartcontract address to which the configuration belongs too.
func (c *Configuration) SetAddress(address string) {
	c.Address = address
}

func (c *Configuration) Exists() bool { return c.exists }

// JSON representation of the static.Configuration
func (c *Configuration) ToJSON() map[string]interface{} {
	return map[string]interface{}{
		"s":       c.Name,
		"n":       c.NetworkId,
		"g":       c.Group,
		"o":       c.Organization,
		"p":       c.Project,
		"address": c.Address,
	}
}

// static.Configuration as a JSON string
func (c *Configuration) ToString() string {
	interfaces := c.ToJSON()
	byt, err := json.Marshal(interfaces)
	if err != nil {
		return ""
	}

	return string(byt)
}
